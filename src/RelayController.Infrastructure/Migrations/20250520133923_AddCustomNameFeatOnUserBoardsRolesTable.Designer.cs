// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RelayController.Infrastructure.Context;

#nullable disable

namespace RelayController.Infrastructure.Migrations
{
    [DbContext(typeof(RelayControllerContext))]
    [Migration("20250520133923_AddCustomNameFeatOnUserBoardsRolesTable")]
    partial class AddCustomNameFeatOnUserBoardsRolesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RelayController.Domain.Aggregates.RelayControllerAggregates.RelayControllerBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<int?>("DayOfMonth")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_month");

                    b.Property<string>("DayOfWeek")
                        .HasColumnType("text")
                        .HasColumnName("day_of_week");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enable");

                    b.Property<string>("Repeat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("repeat");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.HasIndex("Updated");

                    b.ToTable("relay_controller_boards", (string)null);
                });

            modelBuilder.Entity("RelayController.Domain.Aggregates.UserAggregates.Entities.UserBoardsRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("CustomName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RelayControllerBoardId")
                        .HasColumnType("uuid")
                        .HasColumnName("relay_controller_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.HasIndex("Updated");

                    b.HasIndex("UserId");

                    b.ToTable("user_boards_roles", (string)null);
                });

            modelBuilder.Entity("RelayController.Domain.Aggregates.UserAggregates.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.HasIndex("Updated");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RelayController.Domain.Aggregates.RelayControllerAggregates.RelayControllerBoard", b =>
                {
                    b.OwnsOne("RelayController.Domain.ValueObjects.Time", "EndTime", b1 =>
                        {
                            b1.Property<Guid>("RelayControllerBoardId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Hour")
                                .HasColumnType("integer")
                                .HasColumnName("end_hour");

                            b1.Property<int>("Minute")
                                .HasColumnType("integer")
                                .HasColumnName("end_minute");

                            b1.Property<int>("Second")
                                .HasColumnType("integer")
                                .HasColumnName("end_second");

                            b1.HasKey("RelayControllerBoardId");

                            b1.ToTable("relay_controller_boards");

                            b1.WithOwner()
                                .HasForeignKey("RelayControllerBoardId");
                        });

                    b.OwnsOne("RelayController.Domain.ValueObjects.Time", "StartTime", b1 =>
                        {
                            b1.Property<Guid>("RelayControllerBoardId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Hour")
                                .HasColumnType("integer")
                                .HasColumnName("start_hour");

                            b1.Property<int>("Minute")
                                .HasColumnType("integer")
                                .HasColumnName("start_minute");

                            b1.Property<int>("Second")
                                .HasColumnType("integer")
                                .HasColumnName("start_second");

                            b1.HasKey("RelayControllerBoardId");

                            b1.ToTable("relay_controller_boards");

                            b1.WithOwner()
                                .HasForeignKey("RelayControllerBoardId");
                        });

                    b.Navigation("EndTime");

                    b.Navigation("StartTime")
                        .IsRequired();
                });

            modelBuilder.Entity("RelayController.Domain.Aggregates.UserAggregates.Entities.UserBoardsRoles", b =>
                {
                    b.HasOne("RelayController.Domain.Aggregates.UserAggregates.User", null)
                        .WithMany("DevicesRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RelayController.Domain.ValueObjects.Role", "Role", b1 =>
                        {
                            b1.Property<Guid>("UserBoardsRolesId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .HasColumnType("integer")
                                .HasColumnName("role_id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("role_name");

                            b1.HasKey("UserBoardsRolesId");

                            b1.ToTable("user_boards_roles");

                            b1.WithOwner()
                                .HasForeignKey("UserBoardsRolesId");
                        });

                    b.Navigation("Role")
                        .IsRequired();
                });

            modelBuilder.Entity("RelayController.Domain.Aggregates.UserAggregates.User", b =>
                {
                    b.Navigation("DevicesRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
